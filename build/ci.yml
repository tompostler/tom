trigger:
- main

name: '$(Date:%y).$(DayOfYear).$(Rev:r)'

pool:
  vmImage: windows-2022

variables:
- group: tompostler

steps:
- checkout: self
  submodules: true

- task: UseDotNet@2
  displayName: Use net8
  inputs:
    version: 8.x

- task: PowerShell@2
  displayName: dotnet tool install nbgv
  inputs:
    targetType: inline
    script: dotnet tool install nbgv --global --version 3.6.*

- task: PowerShell@2
  displayName: nbgv get-version and set variables
  inputs:
    targetType: inline
    script: |
      $versionInfo = nbgv get-version --format json | ConvertFrom-Json;
      Write-Host ($versionInfo | ConvertTo-Json);
      foreach ($cloudBuildVar in $versionInfo.CloudBuildAllVars.PSObject.Properties) {
        Write-Host "##vso[task.setvariable variable=$($cloudBuildVar.Name);]$($cloudBuildVar.Value)";
      }
      Write-Host "##vso[build.updatebuildnumber]$($versionInfo.CloudBuildNumber)";

- task: PowerShell@2
  displayName: Update build number
  inputs:
    targetType: inline
    script: dotnet tool install nbgv --global --version 3.6.*

- task: DotNetCoreCLI@2
  displayName: Restore packages
  inputs:
    command: restore
    projects: src/tom.sln

- task: DotNetCoreCLI@2
  displayName: Build solution
  inputs:
    command: build
    projects: src/tom.sln
    arguments: '--no-restore --configuration Debug --property:PackageOutputPath=$(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  displayName: Publish self-contained (linux-x64)
  inputs:
    command: publish
    publishWebProjects: false
    projects: src/tom.exe/tom.exe.csproj
    arguments: '--no-restore --configuration Debug --runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/tom.exe/linux-x64/'
    zipAfterPublish: false
    modifyOutputPath: false

- task: DotNetCoreCLI@2
  displayName: Publish self-contained (win-x64)
  inputs:
    command: publish
    publishWebProjects: false
    projects: src/tom.exe/tom.exe.csproj
    arguments: '--no-restore --configuration Debug --runtime win-x64 --output $(Build.ArtifactStagingDirectory)/tom.exe/win-x64/'
    zipAfterPublish: false
    modifyOutputPath: false

- powershell: |
    Rename-Item -Path '$(Build.ArtifactStagingDirectory)/tom.exe/linux-x64/Unlimitedinf.Tom.Exe' -NewName 'tom' -Force -Verbose;
    Rename-Item -Path '$(Build.ArtifactStagingDirectory)/tom.exe/win-x64/Unlimitedinf.Tom.Exe.exe' -NewName 'tom.exe' -Force -Verbose;
  displayName: Rename self-contained output files

- task: DeleteFiles@1
  displayName: Delete non-exes from publish
  inputs:
    sourceFolder: $(Build.ArtifactStagingDirectory)/tom.exe
    contents: |
      **/*.pdb
      **/*.xml

- task: PublishBuildArtifacts@1
  displayName: Publish build artifacts
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: drop
    publishLocation: Container

- powershell: |
    # .DESCRIPTION
    # This is needed since VSTS "Tag build on success" is tagging ALL the builds. This, as a build task, can be conditionalized to only run on the master branches.
    # In order for this to work for a build/release phase, you MUST check the box to "Allow scripts to access OAuth token".
    # This script will succeed on Unauthorized, Duplicate Tag, and successful scenarios. This is by design.
    $tagUrl = "{0}{1}/_apis/git/repositories/{2}/refs?api-version=1.0" -f $env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI, $env:SYSTEM_TEAMPROJECT, $env:BUILD_REPOSITORY_NAME
    Write-Host "URL: $tagUrl"
    $newTag = @"
    [
      {
        "name": "refs/tags/$env:BUILD_BUILDNUMBER",
        "oldObjectId": "0000000000000000000000000000000000000000",
        "newObjectId": "$env:BUILD_SOURCEVERSION"
      }
    ]
    "@;
    $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((":{0}" -f $env:SYSTEM_ACCESSTOKEN)))
    $result = Invoke-RestMethod $tagUrl -Method POST -Body $newTag -ContentType "application/json" -Headers @{ Authorization = ("Basic {0}" -f $auth) }
    $result | ConvertTo-Json -Depth 100 | Out-Host
  condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  displayName: Tag source with build number
  env:
    # Have to explicitly map through to grant access
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    
- task: NuGetCommand@2
  condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  displayName: NuGet push
  inputs:
    command: push
    packagesToPush: $(Build.ArtifactStagingDirectory)\*.nupkg
    nuGetFeedType: external
    publishFeedCredentials: f3d8b226-1860-4e09-81b1-d0a4d3ffcb6f

- powershell: |
    $body = @{
      BuildNumber = '$(Build.BuildNumber)';
    } | ConvertTo-Json;
    Invoke-WebRequest -Uri '$(logicappuri-unlimitedinf-update-version-file)' -Method POST -ContentType 'application/json' -Body $body -UseBasicParsing;
  displayName: Update Version file
